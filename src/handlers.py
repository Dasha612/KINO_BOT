import os
from aiogram import types, Router, Bot, F
from aiogram.filters import CommandStart, Command
import keyboards as kb
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
import logging

from config import bot
from db.models import async_session
import db.requests as rq
from open_ai import movie_rec, get_movie_recommendation
from kinopoisk_omdb import get_movies, extract_movie_data, find_by_imdb
from src.callback_data import Menu_Callback


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
questions = [
    "–ö–∞–∫–∏–µ –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞—Ö–æ–¥—è—Ç?",
    "–ï—Å—Ç—å –ª–∏ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ? –ö–∞–∫–æ–π —ç—Ç–æ?",
    "–ö–∞–∫–∏–µ –∞–∫—Ç–µ—Ä—ã –∏–ª–∏ —Ä–µ–∂–∏—Å—Å–µ—Ä—ã —Ç–µ–±—è —Ä–µ–∞–ª—å–Ω–æ —Ü–µ–ø–ª—è—é—Ç?",
    "–¢—ã –±–æ–ª—å—à–µ –ª—é–±–∏—à—å —Ñ–∏–ª—å–º—ã —Å –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–º —Å—é–∂–µ—Ç–æ–º –∏–ª–∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ?",
    "–õ—é–±–∏—à—å —Ñ–∏–ª—å–º—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —Ñ–∏–Ω–∞–ª–æ–º –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º?",
    "–ú–æ–∂–µ—Ç, —É —Ç–µ–±—è –µ—Å—Ç—å –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã –∏–∑ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω—ã?",
    "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º —Ç—ã –≤—ã–±–µ—Ä–µ—à—å –Ω–∞ –≤–µ—á–µ—Ä –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è?"
]
class Anketa(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4= State()
    q5 = State()
    q6 = State()
    q7 = State()



@router.callback_query(F.data == "set_profile")
async def registration_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(questions[0])
    await state.set_state(Anketa.q1)
    await callback.answer()

@router.message(Anketa.q1)
async def set_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer(questions[1])
    await state.set_state(Anketa.q2)

@router.message(Anketa.q2)
async def set_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await message.answer(questions[2])
    await state.set_state(Anketa.q3)

@router.message(Anketa.q3)
async def set_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await message.answer(questions[3])
    await state.set_state(Anketa.q4)

@router.message(Anketa.q4)
async def set_q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    await message.answer(questions[4])
    await state.set_state(Anketa.q5)

@router.message(Anketa.q5)
async def set_q5(message: types.Message, state: FSMContext):
    await state.update_data(q5=message.text)
    await message.answer(questions[5])
    await state.set_state(Anketa.q6)

@router.message(Anketa.q6)
async def set_q6(message: types.Message, state: FSMContext):
    await state.update_data(q6=message.text)
    await message.answer(questions[6])
    await state.set_state(Anketa.q7)

@router.message(Anketa.q7)
async def set_q7(message: types.Message, state: FSMContext):
    await state.update_data(q7=message.text)
    user_data = await state.get_data()
    member = await bot.get_chat_member(chat_id='-100' + os.getenv("TEST_CHAT_ID"), user_id=message.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await rq.check_and_add_recommendations(
        rec1=user_data['q1'], rec2=user_data['q2'], rec3=user_data['q3'],
        rec4=user_data['q4'], rec5=user_data['q5'], rec6=user_data['q6'], rec7=user_data['q7'],
        user_id=message.from_user.id, async_session=async_session
    )
    await rq.update_status(message.from_user.id, True )

    await message.answer('–£—Ñ—Ñ...–í—Å–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–ª.')
    await message.answer('–Ø —Å–º–æ—Ç—Ä—é, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –∫–∏–Ω–æ–º–∞–Ω, –Ω–æ –¥–∞–∂–µ —Ç–µ–±—è —è —Å–º–æ–≥—É —É–¥–∏–≤–∏—Ç—å.', reply_markup=types.ReplyKeyboardRemove())

    if member.status == 'left':
        await message.answer(
            '–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∫–∞ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –í–∏–∫–∞ –ø—Ä–æ –∫–∏–Ω–æ',
            reply_markup=kb.subscribe_button
        )
    else:
        await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã!')
        response = await movie_rec(message.from_user.id)
        movies_data = await get_movies(response, message.from_user.id)
        movies = await extract_movie_data(movies_data)
        await state.update_data(movies=movies, current_index=0)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
        await send_movie_or_edit(message, movies[0], state, 0, message.from_user.id)

    await state.update_data(current_index=0)

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∏–Ω–æ-–±–æ—Ç!"

    )
    await message.answer(
        '–≠—Ç–æ—Ç –±–æ—Ç.... (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)',
        reply_markup=kb.main_menu_button
    )

@router.callback_query(F.data == 'check')
async def check_sub(callback: CallbackQuery, bot: Bot, state: FSMContext):
    is_subscribed = await bot.get_chat_member(chat_id='-100' + os.getenv("TEST_CHAT_ID"), user_id=callback.from_user.id)

    if is_subscribed.status != 'left':
        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await callback.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n–ù–∞—á–∏–Ω–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã!"
        )

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        response = await movie_rec(callback.from_user.id)
        movies_data = await get_movies(response, callback.from_user.id)
        movies = await extract_movie_data(movies_data)
        await state.update_data(movies=movies, current_index=0)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
        await send_movie_or_edit(callback.message, movies[0], state, 0, user_id=callback.from_user.id)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await callback.message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=kb.subscribe_button  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        )

    await callback.answer()


@router.callback_query(F.data == 'my_profile')
async def my_profile(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    user_id = callback.from_user.id
    status = await rq.get_status(user_id)
    status = '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' if status else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'

    await callback.message.answer(
        (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"<b>ID:</b> <code>{user_id}</code>\n"
            #f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> <i>–æ—Ç–∫–ª—é—á–µ–Ω–∞</i>\n"
            f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> <i>{status}</i>"
        ),
        parse_mode="HTML",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        reply_markup=kb.profile_menu_buttons
    )


@router.callback_query(F.data == 'recommendations')
async def get_recommendations(callback: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    user_id = callback.from_user.id
    #start_rec_message = await callback.message.answer("–ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...", reply_markup=ReplyKeyboardRemove())
    member = await bot.get_chat_member(
        chat_id='-100' + os.getenv("TEST_CHAT_ID"),
        user_id=user_id
    )

    if member.status == 'left':  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback.message.answer(
            "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –í–∏–∫–∞ –ø—Ä–æ –∫–∏–Ω–æ.",
            reply_markup=kb.subscribe_button
        )
        return

    unwatched_movies = await rq.get_unrec(user_id)
    logger.info(f"UNWATCHED for user id {user_id}: {unwatched_movies}")

    recommendations = await rq.get_rec(user_id)
    if len(unwatched_movies) != 0:
        res = await find_by_imdb(unwatched_movies)
        #await start_rec_message.delete()
        movies = [
            {**movie, "from_unwatched": True}  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
            for movie in await extract_movie_data(res)
        ]
        await state.update_data(movies=movies, current_index=0)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
        await send_movie_or_edit(callback.message, movies[0], state, 0, user_id)
        return

    if not recommendations:
        await callback.message.answer(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ —Ñ–∏–ª—å–º, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
            "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ 7 –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å. –ß–µ–º —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–µ–µ –±—É–¥—É—Ç "
            "—Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã, —Ç–µ–º –ª—É—á—à–µ —è —Å–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º.\n–ü—Ä–∏—Å—Ç—É–ø–∏–º?",
            reply_markup=kb.set_profile_button,
        )
        #await start_rec_message.delete()
        return


    response = await movie_rec(user_id)
    movies_data = await get_movies(response, user_id)

    movies = await extract_movie_data(movies_data)
    logger.info(f"–§–∏–ª—å–º—ã –¥–ª—è –ø–æ–∫–∞–∑–∞: {movies}")

    await state.update_data(movies=movies, current_index=0)
    #await start_rec_message.delete()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
    await send_movie_or_edit(callback.message, movies[0], state, 0, user_id)


async def send_movie_or_edit(message, movie, state, index, user_id):
    title = movie['title']
    google_search_url = f"https://www.google.com/search?q=—Å–º–æ—Ç—Ä–µ—Ç—å+—Ñ–∏–ª—å–º+{title.replace(' ', '+')}"

    poster_url = movie.get('poster', 'No image available')
    if not poster_url or poster_url == 'No image available':
        poster_url = None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    rating = round(float(movie['rating']), 1) if movie['rating'] != 'Not Found' else 'Not Found'

    movie_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"<b>–ì–æ–¥:</b> {movie['year']}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie['duration']}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> {movie['genres']}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {movie['description']}\n"
        f'<a href="{google_search_url}">–°–º–æ—Ç—Ä–µ—Ç—å</a>'
    )
    keyboard = kb.user_recommendation_button(index)

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    message_id = data.get("message_id")

    # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
    if poster_url:
        try:
            if message_id:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await message.bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    media=InputMediaPhoto(
                        media=poster_url,
                        caption=movie_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=keyboard
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                sent_message = await message.answer_photo(
                    photo=poster_url,
                    caption=movie_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                await state.update_data(message_id=sent_message.message_id)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            logger.error(f"Failed to send photo: {e}")
            await message.answer(
                text=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if message_id:
            await message.bot.edit_message_text(
                text=movie_text,
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            sent_message = await message.answer(
                text=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(message_id=sent_message.message_id)
    if movie.get("from_unwatched"):
        try:
            await rq.remove_unrec(user_id, movie['movie_id'])

        except Exception as e:
            logger.error(f"Failed to remove movie {movie['movie_id']} from unwatched_movies for user {user_id}: {e}")


@router.callback_query(Menu_Callback.filter())
async def handle_movie_action(callback: types.CallbackQuery, callback_data: Menu_Callback, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    data = await state.get_data()
    movies = data.get("movies", [])
    current_index = data.get("current_index", 0)
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if current_index >= len(movies) or current_index < 0:
        await callback.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    action = callback_data.menu_name
    movie = movies[current_index]

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"User {callback.from_user.id} selected action: {action}")

    if action == "like":
        await rq.add_to_likes(callback.from_user.id, movie['movie_id'])
    elif action == "next":
        await rq.add_to_next(callback.from_user.id, movie['movie_id'])
    elif action == "–°—Ç–æ–ø":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∏–ª—å–º–æ–≤
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        remaining_movies = movies[current_index:]  # –§–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
        logger.info(remaining_movies)
        for movie in remaining_movies:
            await rq.add_to_unrec(user_id, movie['movie_id'])

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        await state.clear()
        await callback.message.answer(
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ!",
            reply_markup=kb.main_menu_button
        )
        await callback.answer()
        return
    elif action == "watched":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º", reply_markup=kb.rate_buttons)
        await state.update_data(last_action="watched")
        await callback.answer()
        return

    last_action = data.get("last_action", "")
    if last_action == "watched":
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∏–ª—å–º–∞
    current_index += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
    if current_index >= len(movies):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        loading_message = await callback.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        logger.info(f"–î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞. –ù–æ–≤—ã–µ —Ä–µ–∫–∏ –¥–ª—è: {callback.from_user.id}")
        response = await movie_rec(callback.from_user.id)
        logger.info(f"–î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞. –ù–æ–≤—ã–µ —Ä–µ–∫–∏: {response}")
        movies_data = await get_movies(response, callback.from_user.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–∞: {movies_data}")
        new_movies = await extract_movie_data(movies_data)
        logger.info(new_movies)
        #–ü—Ä–æ–±–ª–µ–º–∞: —á–∞—Ç–≥–ø—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –ª–∞–π–∫–∞—Ö –∏–∑-–∑–∞ —á–µ–≥–æ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
        #–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö


        # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º
        if not new_movies:
            await loading_message.delete()
            await callback.message.answer('–ö–∞–∂–µ—Ç—Å—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø" –∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @Ddasmii')
            await callback.answer()
            return
        await loading_message.delete()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –≤ —Å–ø–∏—Å–æ–∫
        movies.extend(new_movies)
        await state.update_data(movies=movies)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=current_index)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º
    if current_index < len(movies):
        await send_movie_or_edit(callback.message, movies[current_index], state, current_index, user_id)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º callback
    await callback.answer()






@router.callback_query(F.data.in_(['1', '2', '3', '4', '5']))
async def handle_rating(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rating = int(callback.data)
    data = await state.get_data()
    current_index = data.get("current_index", 0)
    movies = data.get("movies", [])
    movie = movies[current_index]
    user_id = callback.from_user.id

    if user_rating >=4:
        await rq.save_movie_rating(user_id=callback.from_user.id, movie_id=movie['movie_id'])

    await callback.message.delete()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ last_action
    await state.update_data(last_action="")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å–º—É
    current_index += 1
    if current_index >= len(movies):
        loading_message = await callback.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã
        response = await movie_rec(callback.from_user.id)
        movies_data = await get_movies(response, callback.from_user.id)
        new_movies = await extract_movie_data(movies_data)
        await loading_message.delete()
        movies.extend(new_movies)
        current_index = len(movies) - len(new_movies)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        await state.update_data(movies=movies)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º
    await state.update_data(current_index=current_index)
    await send_movie_or_edit(callback.message, movies[current_index], state, current_index, user_id)
    await callback.answer()



@router.callback_query(F.data == 'profile_reset_recommendations')
async def reset_rec(callback: CallbackQuery):

    await rq.reset_recommendations(callback.from_user.id, async_session=async_session)
    await rq.update_status(callback.from_user.id, False)
    await callback.message.answer(
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã.",
        reply_markup=kb.main_menu_button
    )
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)


@router.callback_query(F.data == 'main')
async def go_to_main_page(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é",
        reply_markup=kb.main_menu_button  # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )







@router.callback_query(F.data == 'favourites')
async def favourites(callback: CallbackQuery):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ IMDb ID —Ñ–∏–ª—å–º–æ–≤ –∏–∑ "–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    liked = await rq.get_liked_movies(callback.from_user.id)
    movies_on_page = 15
    page = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    if not liked:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.", reply_markup=kb.main)

    logger.info(f"–ò–∑–±—Ä–∞–Ω–Ω—ã–µ: {liked}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–∞—Ö —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    favourites_data = await find_by_imdb(liked)



    logger.info(favourites_data)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
    movies = [
        item["data"]["docs"][0]  # –ü–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        for item in favourites_data.values() if item["data"]["docs"]
    ]



    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start = (page - 1) * movies_on_page
    end = page * movies_on_page
    movies_for_page = movies[start:end]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    movie_list = []
    for i, movie in enumerate(movies_for_page, start=start + 1):
        title = movie.get('name') or movie.get('alternativeName') or "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        year = movie.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        rating = round(movie.get('rating', {}).get('kp', 0), 1)
        google_search_url = f"https://www.google.com/search?q=—Å–º–æ—Ç—Ä–µ—Ç—å+—Ñ–∏–ª—å–º+{title.replace(' ', '+')}"

        movie_list.append(
            f"<b>{i}. üé¨ <a href='{google_search_url}'>{title}</a></b>\n"
            f"   üìÖ <i>{year} –≥–æ–¥</i>\n"
            f"   ‚≠ê <i>–†–µ–π—Ç–∏–Ω–≥: {rating if rating > 0 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</i>"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
    if movie_list:
        movie_list_text = "<b>üåü –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:</b>\n\n" + "\n\n".join(movie_list)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        total_pages = -(-len(movies) // movies_on_page)  # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        pagination_buttons = []

        if page > 1:
            pagination_buttons.append(InlineKeyboardButton(text='‚èÆÔ∏è –í –Ω–∞—á–∞–ª–æ', callback_data='page_1'))
            pagination_buttons.append(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'page_{page - 1}'))

        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton(text='‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥', callback_data=f'page_{page + 1}'))
            pagination_buttons.append(InlineKeyboardButton(text='‚è© –í –∫–æ–Ω–µ—Ü', callback_data=f'page_{total_pages}'))

        pagination_markup = InlineKeyboardMarkup(inline_keyboard=[
            pagination_buttons,
            [InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='main')]
        ])

        await callback.message.answer(movie_list_text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=pagination_markup)









