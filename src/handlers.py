import os
from aiogram import types, Router, Bot, F
from aiogram.filters import CommandStart, Command
import keyboards as kb
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto
import logging

from config import bot
from db.models import async_session
import db.requests as rq
from open_ai import get_movie_recommendation
from kinopoisk_omdb import get_movies, extract_movie_data, get_favourites_data
from src.callback_data import Menu_Callback


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
questions = [
    "–ö–∞–∫–∏–µ –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞—Ö–æ–¥—è—Ç?",
    "–ï—Å—Ç—å –ª–∏ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ? –ö–∞–∫–æ–π —ç—Ç–æ?",
    "–ö–∞–∫–∏–µ –∞–∫—Ç–µ—Ä—ã –∏–ª–∏ —Ä–µ–∂–∏—Å—Å–µ—Ä—ã —Ç–µ–±—è —Ä–µ–∞–ª—å–Ω–æ —Ü–µ–ø–ª—è—é—Ç?",
    "–¢—ã –±–æ–ª—å—à–µ –ª—é–±–∏—à—å —Ñ–∏–ª—å–º—ã —Å –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–º —Å—é–∂–µ—Ç–æ–º –∏–ª–∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ?",
    "–õ—é–±–∏—à—å —Ñ–∏–ª—å–º—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —Ñ–∏–Ω–∞–ª–æ–º –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º?",
    "–ú–æ–∂–µ—Ç, —É —Ç–µ–±—è –µ—Å—Ç—å –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã –∏–∑ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω—ã?",
    "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º —Ç—ã –≤—ã–±–µ—Ä–µ—à—å –Ω–∞ –≤–µ—á–µ—Ä –ø–æ—Å–ª–µ —Ç—è–∂—ë–ª–æ–≥–æ –¥–Ω—è?"
]
class Anketa(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4= State()
    q5 = State()
    q6 = State()
    q7 = State()

@router.message(F.text == '–î–∞–≤–∞–π')
async def registration_start(message: Message, state: FSMContext) -> None:
    await message.answer(questions[0])
    await state.set_state(Anketa.q1)

@router.message(Anketa.q1)
async def set_q1(message: Message, state: FSMContext) -> None:
    await state.update_data(q1=message.text)
    await message.answer(questions[1])
    await state.set_state(Anketa.q2)

@router.message(Anketa.q2)
async def set_q1(message: Message, state: FSMContext) -> None:
    await state.update_data(q2=message.text)
    await message.answer(questions[2])
    await state.set_state(Anketa.q3)

@router.message(Anketa.q3)
async def set_q1(message: Message, state: FSMContext) -> None:
    await state.update_data(q3=message.text)
    await message.answer(questions[3])
    await state.set_state(Anketa.q4)

@router.message(Anketa.q4)
async def set_q1(message: Message, state: FSMContext) -> None:
    await state.update_data(q4=message.text)
    await message.answer(questions[4])
    await state.set_state(Anketa.q5)

@router.message(Anketa.q5)
async def set_q1(message: Message, state: FSMContext) -> None:
    await state.update_data(q5=message.text)
    await message.answer(questions[5])
    await state.set_state(Anketa.q6)

@router.message(Anketa.q6)
async def set_q1(message: Message, state: FSMContext) -> None:
    await state.update_data(q6=message.text)
    await message.answer(questions[6])
    await state.set_state(Anketa.q7)

@router.message(Anketa.q7)
async def set_q7(message: Message, state: FSMContext) -> None:
    await state.update_data(q7=message.text)
    user_data = await state.get_data()
    member = await bot.get_chat_member(chat_id='-100' + os.getenv("TEST_CHAT_ID"), user_id=message.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await rq.check_and_add_recommendations(
        rec1=user_data['q1'], rec2=user_data['q2'], rec3=user_data['q3'],
        rec4=user_data['q4'], rec5=user_data['q5'], rec6=user_data['q6'], rec7=user_data['q7'],
        user_id=message.from_user.id, async_session=async_session
    )

    await message.answer('–£—Ñ—Ñ...–í—Å–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–ª.')
    await message.answer('–Ø —Å–º–æ—Ç—Ä—é, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –∫–∏–Ω–æ–º–∞–Ω, –Ω–æ –¥–∞–∂–µ —Ç–µ–±—è —è —Å–º–æ–≥—É —É–¥–∏–≤–∏—Ç—å.')

    if member.status == 'left':
        await message.answer(
            '–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤. –ü–æ–∫–∞ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –í–∏–∫–∞ –ø—Ä–æ –∫–∏–Ω–æ',
            reply_markup=kb.subscribe_button
        )
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã
        stop_b = kb.stop_button
        await message.answer(
            '–ù–∞—á–∏–Ω–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã!',
            reply_markup= stop_b
        )
        response = await get_movie_recommendation(message.from_user.id)
        movies_data = await get_movies(response, message.from_user.id)
        movies = await extract_movie_data(movies_data)
        await state.update_data(movies=movies, current_index=0)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
        await send_movie_or_edit(message, movies[0], state, 0)

    await state.update_data(current_index=0)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∏–Ω–æ-–±–æ—Ç!"

    )
    await message.answer(
        '–≠—Ç–æ—Ç –±–æ—Ç.... (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)',
        reply_markup=kb.main_menu_button
    )

@router.message(F.text == '–°—Ç–æ–ø')
async def stop_recommendations(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ!", reply_markup=kb.main_menu_button)



@router.callback_query(F.data == 'check')
async def check_sub(callback: CallbackQuery, bot: Bot, state: FSMContext):
    is_subscribed = await bot.get_chat_member(chat_id='-100' + os.getenv("TEST_CHAT_ID"), user_id=callback.from_user.id)

    if is_subscribed.status != 'left':
        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
        await callback.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n–ù–∞—á–∏–Ω–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã!",
            reply_markup=kb.stop_button  # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        )

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        response = await get_movie_recommendation(callback.from_user.id)
        movies_data = await get_movies(response, callback.from_user.id)
        movies = await extract_movie_data(movies_data)
        await state.update_data(movies=movies, current_index=0)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
        await send_movie_or_edit(callback.message, movies[0], state, 0)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await callback.message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            reply_markup=kb.subscribe_button  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        )
    await callback.answer()



@router.message(F.text == '–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å')
async def my_profile(message: types.Message):
    user_id = message.from_user.id
    recommendations = await rq.get_rec(user_id)
    status = '–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' if recommendations else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'

    await message.answer(
        (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"<b>ID:</b> <code>{user_id}</code>\n"
            #f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> <i>–æ—Ç–∫–ª—é—á–µ–Ω–∞</i>\n"
            f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> <i>{status}</i>"
        ),
        parse_mode="HTML",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        reply_markup=kb.profile_menu_buttons
    )


@router.message(F.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def get_recommendations(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = await rq.get_rec(user_id)

    if not recommendations:
        await message.answer(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ —Ñ–∏–ª—å–º, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
            "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ 7 –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å. –ß–µ–º —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–µ–µ –±—É–¥—É—Ç "
            "—Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã, —Ç–µ–º –ª—É—á—à–µ —è —Å–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º.\n–ü—Ä–∏—Å—Ç—É–ø–∏–º?",
            reply_markup=kb.set_profile_button,
        )
        return

    # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å—Ç—å, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å
    response = await get_movie_recommendation(user_id)
    movies_data = await get_movies(response, user_id)
    movies = await extract_movie_data(movies_data)
    await state.update_data(movies=movies, current_index=0)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
    await send_movie_or_edit(message, movies[0], state, 0)


async def send_movie_or_edit(message, movie, state, index):
    poster_url = movie['poster']
    movie_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {movie['title']}\n"
        f"<b>–ì–æ–¥:</b> {movie['year']}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {movie['rating']}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie['duration']}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> {movie['genres']}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {movie['description']}"
    )
    keyboard = kb.user_recommendation_button(index)


    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    message_id = data.get("message_id")

    if poster_url and poster_url != 'No image available':
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await message.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=poster_url,
                    caption=movie_text,
                    parse_mode="HTML"
                ),
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await message.answer_photo(
                photo=poster_url,
                caption=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(message_id=sent_message.message_id)
    else:
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await message.bot.edit_message_text(
                text=movie_text,
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await message.answer(
                text=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(message_id=sent_message.message_id)



@router.callback_query(Menu_Callback.filter())
async def handle_movie_action(callback: types.CallbackQuery, callback_data: Menu_Callback, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    data = await state.get_data()
    movies = data.get("movies", [])
    current_index = data.get("current_index", 0)


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if current_index >= len(movies) or current_index < 0:
        await callback.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.answer()
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    action = callback_data.menu_name
    movie = movies[current_index]

    if action == "like":
        await rq.add_to_likes(callback.from_user.id, movie['movie_id'])
    elif action == "next":
        await rq.add_to_next(callback.from_user.id, movie['movie_id'])

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–ª—å–º—É
    current_index += 1
    if current_index >= len(movies):
        await callback.message.answer("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å–µ–π—á–∞—Å –º—ã –Ω–∞–π–¥–µ–º –µ—â–µ —Ñ–∏–ª—å–º—ã :)")
        await callback.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º
    await state.update_data(current_index=current_index)
    await send_movie_or_edit(callback.message, movies[current_index], state, current_index)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await callback.answer()



@router.message(F.text == '–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
async def go_to_main_page(message: types.Message):

    result = await rq.reset_recommendations(message.from_user.id, async_session=async_session)
    await message.answer(
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã.",
        reply_markup=kb.main_menu_button
    )


@router.message(F.text == '–ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def go_to_main_page(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é",
        reply_markup=kb.main_menu_button
    )



async def send_favourite_movie_or_edit(message, movie, state, index):
    poster_url = movie['poster']
    movie_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {movie['title']}\n"
        f"<b>–ì–æ–¥:</b> {movie['year']}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {movie['rating']}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie['duration']}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> {movie['genres']}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {movie['description']}"
    )
    keyboard = kb.favourites_button  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    message_id = data.get("message_id")

    if poster_url and poster_url != 'No image available':
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await message.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=poster_url,
                    caption=movie_text,
                    parse_mode="HTML"
                ),
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await message.answer_photo(
                photo=poster_url,
                caption=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(message_id=sent_message.message_id)
    else:
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await message.bot.edit_message_text(
                text=movie_text,
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await message.answer(
                text=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(message_id=sent_message.message_id)


@router.callback_query(F.data.in_(['move_forward', 'move_back', 'show_list', '–ù–∞ –≥–ª–∞–≤–Ω—É—é']))
async def handle_favourite_action(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    data = await state.get_data()
    movies = data.get("movies", [])
    current_index = data.get("current_index", 0)

    if not movies:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ!")
        await callback.answer()
        return

    action = callback.data
    if action == "move_forward":
        current_index += 1
        if current_index >= len(movies):
            current_index = 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∏–ª—å–º—É
    elif action == "move_back":
        current_index -= 1
        if current_index < 0:
            current_index = len(movies) - 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–∏–ª—å–º—É
    elif action == "show_list":
        await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É
        await callback.answer()
        return
    elif action == "–ù–∞ –≥–ª–∞–≤–Ω—É—é":
        await callback.message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_menu_button)
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–ª—å–º
    await state.update_data(current_index=current_index)
    await send_favourite_movie_or_edit(callback.message, movies[current_index], state, current_index)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await callback.answer()


@router.message(F.text == '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
async def favourites(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ IMDb ID —Ñ–∏–ª—å–º–æ–≤ –∏–∑ "–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    liked = await rq.get_liked_movies(message.from_user.id)
    if not liked:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.")
        return

    liked_list = list(liked)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–∞—Ö —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    favourites_data = await get_favourites_data(liked_list)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(movies=favourites_data, current_index=0)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
    await send_favourite_movie_or_edit(message, favourites_data[0], state, 0)

async def send_favourite_movie_or_edit(message, movie, state, index):
    poster_url = movie['poster']
    movie_text = (
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {movie['title']}\n"
        f"<b>–ì–æ–¥:</b> {movie['year']}\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {movie['rating']}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie['duration']}\n"
        f"<b>–ñ–∞–Ω—Ä—ã:</b> {movie['genres']}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {movie['description']}"
    )
    keyboard = kb.favourites_button  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    data = await state.get_data()
    message_id = data.get("message_id")

    if poster_url and poster_url != 'No image available':
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await message.bot.edit_message_media(
                chat_id=message.chat.id,
                message_id=message_id,
                media=InputMediaPhoto(
                    media=poster_url,
                    caption=movie_text,
                    parse_mode="HTML"
                ),
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await message.answer_photo(
                photo=poster_url,
                caption=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(message_id=sent_message.message_id)
    else:
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await message.bot.edit_message_text(
                text=movie_text,
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await message.answer(
                text=movie_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await state.update_data(message_id=sent_message.message_id)



